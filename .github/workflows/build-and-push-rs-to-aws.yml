name: Build&Push RS to AWS ECR
run-name: Building RS

on:
  workflow_dispatch:
    inputs:
      release_ref:
        required: true
        type: string
        default: 'v2.1.0'
      java_version:
        required: false
        type: string
        default: '17'
      repository_url:
          required: true
          type: string
          default: 'SecureApiGateway/secure-api-gateway-ob-uk-rs'

env: 
  IMAGE_ARTIFACT_NAME: "secure-api-gateway-rs"  
          

jobs:
  
  build_image:
    name: Build and deploy container image
    runs-on: ubuntu-latest
    environment:
      name: development
    steps:

      # https://github.com/actions/checkout
      - name: checkout release tag
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repository_url }}
          ref: ${{ inputs.release_ref }}

      - name: Prepare JDK and Maven for build
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt' #adoptopenjdk
          java-version: ${{ inputs.java_version }}
          architecture: x64
          cache: 'maven'  

      # Java version and maven settings with protected repository id
      
      - name: Pulling and configuring forgerock maven settings
        run: | 
          curl -u "${{ secrets.FORGEROCK_USER }}":"${{ secrets.FORGEROCK_PASSWORD }}" https://maven.forgerock.org/artifactory/private-releases/settings.xml > settings.xml  
        
      - name: Building Jar
        run: mvn clean install -DskipTests -DskipITs -s settings.xml 
          
      - name: Login to registry
        run: | 
          export AWS_ACCESS_KEY_ID=${{ secrets.ECR_CREDENTIALS_ACCESS_KEY }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.ECR_CREDENTIALS_SECRET_KEY }}
          aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
    
      - name: Building and pushing Container Image
        run: |
          export GIT_SHA_SHORT=$(git rev-parse --short HEAD)
          cd secure-api-gateway-ob-uk-rs-server
          docker build -f docker/Dockerfile --build-arg -t ${{ secrets.ECR_REGISTRY }}/${{ env.IMAGE_ARTIFACT_NAME }}:latest .
          docker push --all-tags ${{ secrets.ECR_REGISTRY }}/${{ env.IMAGE_ARTIFACT_NAME }}
